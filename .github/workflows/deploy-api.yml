name: Deploy Congressional Data API

on:
  push:
    branches: [ main, develop ]
    paths:
      - 'services/api/**'
      - '.github/workflows/deploy-api.yml'
  pull_request:
    branches: [ main ]
    paths:
      - 'services/api/**'
  workflow_dispatch:
    inputs:
      environment:
        description: 'Deployment environment'
        required: true
        default: 'staging'
        type: choice
        options:
          - staging
          - production

env:
  API_SERVICE_PATH: ./services/api
  DOCKER_IMAGE: congressional-data-api
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}/congressional-data-api

jobs:
  test:
    name: Test API Service
    runs-on: ubuntu-latest
    
    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_PASSWORD: test_password
          POSTGRES_USER: test_user
          POSTGRES_DB: test_db
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
      
      - name: Install dependencies
        working-directory: ${{ env.API_SERVICE_PATH }}
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install pytest pytest-asyncio pytest-cov
      
      - name: Run tests
        working-directory: ${{ env.API_SERVICE_PATH }}
        env:
          DATABASE_URL: postgresql://test_user:test_password@localhost:5432/test_db
          REDIS_URL: redis://localhost:6379/0
          ENVIRONMENT: testing
        run: |
          python -m pytest tests/ -v --cov=api --cov-report=term-missing --cov-report=xml
      
      - name: Upload coverage reports
        uses: codecov/codecov-action@v4
        with:
          file: ${{ env.API_SERVICE_PATH }}/coverage.xml
          flags: api
          name: api-coverage
        if: always()

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Run Bandit security linter
        uses: securecodewarrior/github-action-bandit@v1.0.1
        with:
          path: services/api
          config_file: services/api/.bandit
      
      - name: Run Safety check
        working-directory: ${{ env.API_SERVICE_PATH }}
        run: |
          python -m pip install safety
          safety check --json

  build:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [test, security-scan]
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3
      
      - name: Log in to Container Registry
        uses: docker/login-action@v3
        with:
          registry: ${{ env.REGISTRY }}
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Extract metadata
        id: meta
        uses: docker/metadata-action@v5
        with:
          images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
          tags: |
            type=ref,event=branch
            type=ref,event=pr
            type=sha,prefix={{branch}}-
            type=raw,value=latest,enable={{is_default_branch}}
      
      - name: Build and push Docker image
        uses: docker/build-push-action@v5
        with:
          context: ${{ env.API_SERVICE_PATH }}
          file: ${{ env.API_SERVICE_PATH }}/Dockerfile.optimized
          push: true
          tags: ${{ steps.meta.outputs.tags }}
          labels: ${{ steps.meta.outputs.labels }}
          cache-from: type=gha
          cache-to: type=gha,mode=max
          target: production

  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: [build]
    if: github.ref == 'refs/heads/develop' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'staging')
    environment: staging
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Deploy to Railway (Staging)
        env:
          RAILWAY_TOKEN: ${{ secrets.RAILWAY_TOKEN }}
          RAILWAY_SERVICE: congressional-api-staging
        run: |
          npm install -g @railway/cli
          railway login --token $RAILWAY_TOKEN
          railway up --service $RAILWAY_SERVICE
        working-directory: ${{ env.API_SERVICE_PATH }}
      
      - name: Run health check
        run: |
          timeout 300 bash -c '
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${{ vars.STAGING_API_URL }}/health)" != "200" ]]; do
              echo "Waiting for service to be ready..."
              sleep 10
            done
          '
          echo "Service is ready!"
      
      - name: Run smoke tests
        run: |
          curl -f ${{ vars.STAGING_API_URL }}/health
          curl -f ${{ vars.STAGING_API_URL }}/healthz
          curl -f ${{ vars.STAGING_API_URL }}/api/v1/members?page=1&limit=5

  deploy-production:
    name: Deploy to Production
    runs-on: ubuntu-latest
    needs: [deploy-staging]
    if: github.ref == 'refs/heads/main' || (github.event_name == 'workflow_dispatch' && github.event.inputs.environment == 'production')
    environment: production
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Configure Docker for GCP
        run: gcloud auth configure-docker
      
      - name: Deploy to Google Cloud Run
        run: |
          gcloud run deploy congressional-data-api \
            --image ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}:latest \
            --platform managed \
            --region us-central1 \
            --allow-unauthenticated \
            --set-env-vars ENVIRONMENT=production \
            --set-env-vars DATABASE_URL=${{ secrets.DATABASE_URL }} \
            --set-env-vars REDIS_URL=${{ secrets.REDIS_URL }} \
            --set-env-vars SECRET_KEY=${{ secrets.SECRET_KEY }} \
            --memory 1Gi \
            --cpu 1 \
            --concurrency 100 \
            --timeout 60 \
            --max-instances 10 \
            --min-instances 1
      
      - name: Run health check
        run: |
          timeout 300 bash -c '
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${{ vars.PRODUCTION_API_URL }}/health)" != "200" ]]; do
              echo "Waiting for service to be ready..."
              sleep 10
            done
          '
          echo "Production service is ready!"
      
      - name: Run production smoke tests
        run: |
          curl -f ${{ vars.PRODUCTION_API_URL }}/health
          curl -f ${{ vars.PRODUCTION_API_URL }}/healthz
          curl -f ${{ vars.PRODUCTION_API_URL }}/api/v1/members?page=1&limit=5
      
      - name: Create release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: api-${{ github.sha }}
          release_name: API Release ${{ github.sha }}
          body: |
            Automated deployment of Congressional Data API
            
            **Changes:**
            - Deployed from commit: ${{ github.sha }}
            - Environment: Production
            - Service URL: ${{ vars.PRODUCTION_API_URL }}
            
            **Health Check:**
            - Service: ✅ Healthy
            - Database: ✅ Connected
            - API Endpoints: ✅ Responsive
          draft: false
          prerelease: false

  rollback:
    name: Rollback Production
    runs-on: ubuntu-latest
    if: failure() && github.ref == 'refs/heads/main'
    environment: production
    
    steps:
      - name: Setup Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v2
        with:
          service_account_key: ${{ secrets.GCP_SA_KEY }}
          project_id: ${{ secrets.GCP_PROJECT_ID }}
      
      - name: Rollback to previous version
        run: |
          # Get previous revision
          PREVIOUS_REVISION=$(gcloud run revisions list \
            --service congressional-data-api \
            --platform managed \
            --region us-central1 \
            --filter="metadata.name!=$(gcloud run revisions list --service congressional-data-api --platform managed --region us-central1 --limit=1 --format='value(metadata.name)')" \
            --limit=1 \
            --format='value(metadata.name)')
          
          if [ -n "$PREVIOUS_REVISION" ]; then
            echo "Rolling back to revision: $PREVIOUS_REVISION"
            gcloud run services update-traffic congressional-data-api \
              --to-revisions=$PREVIOUS_REVISION=100 \
              --platform managed \
              --region us-central1
          else
            echo "No previous revision found for rollback"
            exit 1
          fi
      
      - name: Verify rollback
        run: |
          timeout 300 bash -c '
            while [[ "$(curl -s -o /dev/null -w ''%{http_code}'' ${{ vars.PRODUCTION_API_URL }}/health)" != "200" ]]; do
              echo "Waiting for rollback to complete..."
              sleep 10
            done
          '
          echo "Rollback completed successfully!"

  notify:
    name: Notify Deployment Status
    runs-on: ubuntu-latest
    needs: [deploy-staging, deploy-production]
    if: always()
    
    steps:
      - name: Notify success
        if: needs.deploy-production.result == 'success'
        run: |
          echo "✅ Congressional Data API deployed successfully to production!"
          echo "Service URL: ${{ vars.PRODUCTION_API_URL }}"
      
      - name: Notify failure
        if: needs.deploy-production.result == 'failure'
        run: |
          echo "❌ Congressional Data API deployment failed!"
          echo "Check the deployment logs for details."
        
      # Add Slack/Discord/Email notifications here if needed